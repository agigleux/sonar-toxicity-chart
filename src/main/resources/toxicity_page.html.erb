<%
  if !@snapshot.nil? && @snapshot.measure('toxicity_chart_status')
    metric_ref = metric('toxicity_chart_status')
    measure_ref = measure('toxicity_chart_status')
    threshold = BigDecimal.new(configuration('threshold', "1"))
    xml_data_obj = measure_ref.data.to_s
    puts xml_data_obj
%>
<style>

.axis text {
  font: 10px sans-serif;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.vlines {
	stroke:rgb(150,148,109);
	shape-rendering:crispEdges;
	stroke-width:1px;
	stroke-opacity:0.3;
}

rect {
  shape-rendering: crispEdges;
}

div.tooltip {
  position: absolute;
  text-align: left;
  padding: 4px;
  font: 12px sans-serif;
  background: #FFF;
  border: 1px solid #333;
  border-radius: 2px;
  pointer-events: none;
}

.tooltip h2 {
	font-family: sans-serif;
	font-size: 130%;
	margin: 0 0 0 0;
}

.tooltip p.path {
	font-size: 90%;
	margin: 0.2em 0 0.7em 0;
	border-bottom: 1px solid #BBB;
}

.tooltip p {
	line-height: 1.1em;
	margin: 0 1px 3px 1px;
}

.tooltip-swatch {
	padding-right: 5px;
	margin: 0 2px 1px 0;
	border: 1px solid;
	color: #EEE;
}

.tooltip .total {
	font-weight: bold;
}
</style>
<div class="widget-row">
 <div class="widget-span widget-span-6">
  <div class="widget-measure-container">
   <div class="widget-measure widget-measure-main">
    <span class="widget-label">Toxicity Chart</span>
    <span id="no_debts">No debts</span>
    <span class="nowrap">
   </div>
  </div>
 </div>
</div>
<div id="toxicity_chart_area" style="text-align:center;margin-top: 10px""></div>
<script language="javascript">
(function () {

  var xmlData = '<%= xml_data_obj %>';

	toxicity = {}

	toxicity.checknames = [
		"Boolean expression complexity",
		"Class data abstraction coupling",
		"Class fan out complexity",
		"Cyclomatic complexity",
		"File length",
		"Method length",
		"Nested if depth",
		"Anon inner length",
		"Parameter number",
		"Missing switch default",
		"Nested try depth"
	];

	toxicity.colors = [
		"#989BFA",
		"#9C4B45",
		"#6D5A8D",
		"#8EA252",
		"#5396AC",
		"#CE8743",
		"#96A9CD",
		"#C79593",
		"#BCCA98",
		"#E9C197",
		"#BB9C68"
	];

	toxicity.parse = function(xmlData) {
		var xml = $j.parseXML(xmlData)
		var nodes = $j(xml).find("source");
		return $j.map(nodes, toxicity.parseNode);
	}

  var limit = <%= threshold %>;
	toxicity.parseNode = function(fnode, fidx) {
		var total = parseFloat($j(fnode).attr("total"));
		if(total < limit) {
     return;
    }
    var path = $j(fnode).attr("name").replace(/\\/g, "/");
		var flawedClass = {
			name: path.split("/").slice(-1)[0],
			path: path,
			total: total
		};
		$j(fnode).children().each(function(eidx, enode) {
			var key = $j(enode).attr("key");
			var cost = $j(enode).attr("cost");
			flawedClass[key] = parseFloat(cost);
		});
		return flawedClass;
	}

	toxicity.tooltip = function(a) {
		var accessor = arguments.length ? a : undefined;
		function tooltip(selection) {
			selection
				.on("mouseover", function(d) {
					if (accessor) {
						d = accessor(d);
					}
					var div = d3.select("#toxicity_chart_area").selectAll("div.tooltip");
					if (div.empty()) {
						div = d3.select("#toxicity_chart_area").append("div").attr("class", "tooltip").style("opacity", 0);
					}
					div.html("");
					div.append("h2").text(d.name);
					div.append("p").attr("class", "path").text(d.path.split("/").slice(0, -1).join("/"));
					$j(toxicity.checknames.slice(0).reverse()).each(function(i, c) {
						if(d[c] > 0) {
							var color = toxicity.colors[toxicity.colors.length - i - 1];
							var p = div.append("p");
							p.append("span")
								.attr("class", "tooltip-swatch")
								.style("color", d3.rgb(color).darker())
								.style("background-color", color);
							p.append("span")
								.text(c + ": " + d[c]);
						}
					});
					var p = div.append("p");
					p.append("span").attr("class", "tooltip-swatch");
					p.append("span").attr("class", "total").text("Total: " + d.total);
					var ttx = $j("#toxicity_chart").scrollLeft() + 10;
					div.style("right", ttx + "px").style("top", "10px");
					div.transition().duration(100).style("opacity", 0.95);
				})
				.on("mouseout", function(d) {
					div = d3.select("body").select("div.tooltip")
					div.transition().duration(250).style("opacity", 0);
				});
		};
		return tooltip;
	}

	var classes = toxicity.parse(xmlData);
	if(classes.length == 0) {
	  return;
	} else {
	  $j("#no_debts").hide();
	}

	var CHEIGHT = 320;
	var BWIDTH = Math.max(400 / classes.length, 2);
	var BGAP = 2;
	var LEFTSPACE = 35;

	var checks = d3.layout.stack()(toxicity.checknames.map(function(key) {
		return classes.map(function(d, i) {
			return { x: i, y: d[key] || 0, flaws: d };
		});
	}));

	d3.selectAll("svg").remove();
	var chart = d3.select("#toxicity_chart_area").append("svg")
		.attr("class", "chart")
		.attr("width", LEFTSPACE + (BWIDTH + BGAP) * classes.length + 10)
		.attr("height", CHEIGHT + 15);

	var xscale = d3.scale.linear()
		.domain([0, classes.length])
		.rangeRound([LEFTSPACE, (BWIDTH + BGAP) * classes.length + LEFTSPACE])

	var yscale = d3.scale.linear()
		.domain([0, (Math.round(classes[0].total/10) + 1) * 10])
		.rangeRound([CHEIGHT, 1]);

	var yaxis = d3.svg.axis()
		.scale(yscale)
		.orient("left")
		.ticks(10);

	var fscale = d3.scale.ordinal().range(toxicity.colors);

	chart.selectAll(".line")
		.data(yscale.ticks(10))
		.enter().append("line")
		.attr("class","vlines")
		.attr("x1", function(td) { return xscale(0) })
		.attr("x2", function(td) { return xscale(classes.length) })
		.attr("y1", yscale)
		.attr("y2", yscale);

	var groups = chart.selectAll("g.checks")
		.data(checks)
		.enter().append("g")
		.attr("class", "check")
		.style("fill", function(d, i) { return fscale(i); })
		.style("stroke", function(d, i) { return d3.rgb(fscale(i)).darker(); });

	groups.selectAll("rect")
		.data(Object)
		.enter().append("rect")
		.attr("x", function(d) { return xscale(d.x); })
		.attr("y", function(d) { return yscale(d.y + d.y0); })
		.attr("height", function(d) { return CHEIGHT - yscale(d.y); })
		.attr("width", function(d) { return BWIDTH; })
		.call(toxicity.tooltip(function(d) { return d.flaws; }));

	chart.append("g")
		.attr("class", "axis")
		.attr("transform", "translate(" + LEFTSPACE + ", 0)")
		.call(yaxis)
			.selectAll("text")
			.attr("y", 6)
			.attr("x", -25)
			.style("text-anchor", "start");		

  })();
</script>
<%
  end
%>
